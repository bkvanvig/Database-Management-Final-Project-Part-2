DROP SEQUENCE SP16_CurrProj_seq ; 
create sequence SP16_CurrProj_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger SP16_CurrProj_PK_trig 
before insert on SP16_CurrProj
for each row 
begin 
select SP16_CurrProj_seq.nextval into :new.projNo from dual; 
end; 
/
alter table SP16_CurrProj add created date ; 
alter table SP16_CurrProj add created_by VARCHAR2 (255) ; 
alter table SP16_CurrProj add row_version_number integer ; 
alter table SP16_CurrProj add updated date ; 
alter table SP16_CurrProj add updated_by VARCHAR2 (255) ; 
/
create or replace trigger SP16_CurrProj_AUD_trig 
before insert or update on SP16_CurrProj 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE SP16_Dept_seq ; 
create sequence SP16_Dept_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger SP16_Dept_PK_trig 
before insert on SP16_Dept
for each row 
begin 
select SP16_Dept_seq.nextval into :new.deptNo from dual; 
end; 
/
alter table SP16_Dept add created date ; 
alter table SP16_Dept add created_by VARCHAR2 (255) ; 
alter table SP16_Dept add row_version_number integer ; 
alter table SP16_Dept add updated date ; 
alter table SP16_Dept add updated_by VARCHAR2 (255) ; 
/
create or replace trigger SP16_Dept_AUD_trig 
before insert or update on SP16_Dept 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE SP16_Emp_seq ; 
create sequence SP16_Emp_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger SP16_Emp_PK_trig 
before insert on SP16_Emp
for each row 
begin 
select SP16_Emp_seq.nextval into :new.personID from dual; 
end; 
/
alter table SP16_Emp add created date ; 
alter table SP16_Emp add created_by VARCHAR2 (255) ; 
alter table SP16_Emp add row_version_number integer ; 
alter table SP16_Emp add updated date ; 
alter table SP16_Emp add updated_by VARCHAR2 (255) ; 
/
create or replace trigger SP16_Emp_AUD_trig 
before insert or update on SP16_Emp 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE SP16_InterimMgr_seq ; 
create sequence SP16_InterimMgr_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger SP16_InterimMgr_PK_trig 
before insert on SP16_InterimMgr
for each row 
begin 
select SP16_InterimMgr_seq.nextval into :new.personID from dual; 
end; 
/
alter table SP16_InterimMgr add created date ; 
alter table SP16_InterimMgr add created_by VARCHAR2 (255) ; 
alter table SP16_InterimMgr add row_version_number integer ; 
alter table SP16_InterimMgr add updated date ; 
alter table SP16_InterimMgr add updated_by VARCHAR2 (255) ; 
/
create or replace trigger SP16_InterimMgr_AUD_trig 
before insert or update on SP16_InterimMgr 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE SP16_Mgr_seq ; 
create sequence SP16_Mgr_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger SP16_Mgr_PK_trig 
before insert on SP16_Mgr
for each row 
begin 
select SP16_Mgr_seq.nextval into :new.personID from dual; 
end; 
/
alter table SP16_Mgr add created date ; 
alter table SP16_Mgr add created_by VARCHAR2 (255) ; 
alter table SP16_Mgr add row_version_number integer ; 
alter table SP16_Mgr add updated date ; 
alter table SP16_Mgr add updated_by VARCHAR2 (255) ; 
/
create or replace trigger SP16_Mgr_AUD_trig 
before insert or update on SP16_Mgr 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE SP16_Person_seq ; 
create sequence SP16_Person_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger SP16_Person_PK_trig 
before insert on SP16_Person
for each row 
begin 
select SP16_Person_seq.nextval into :new.personID from dual; 
end; 
/
alter table SP16_Person add created date ; 
alter table SP16_Person add created_by VARCHAR2 (255) ; 
alter table SP16_Person add row_version_number integer ; 
alter table SP16_Person add updated date ; 
alter table SP16_Person add updated_by VARCHAR2 (255) ; 
/
create or replace trigger SP16_Person_AUD_trig 
before insert or update on SP16_Person 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE SP16_Pres_seq ; 
create sequence SP16_Pres_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger SP16_Pres_PK_trig 
before insert on SP16_Pres
for each row 
begin 
select SP16_Pres_seq.nextval into :new.personID from dual; 
end; 
/
alter table SP16_Pres add created date ; 
alter table SP16_Pres add created_by VARCHAR2 (255) ; 
alter table SP16_Pres add row_version_number integer ; 
alter table SP16_Pres add updated date ; 
alter table SP16_Pres add updated_by VARCHAR2 (255) ; 
/
create or replace trigger SP16_Pres_AUD_trig 
before insert or update on SP16_Pres 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE SP16_PrevEmp_seq ; 
create sequence SP16_PrevEmp_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger SP16_PrevEmp_PK_trig 
before insert on SP16_PrevEmp
for each row 
begin 
select SP16_PrevEmp_seq.nextval into :new.personID from dual; 
end; 
/
alter table SP16_PrevEmp add created date ; 
alter table SP16_PrevEmp add created_by VARCHAR2 (255) ; 
alter table SP16_PrevEmp add row_version_number integer ; 
alter table SP16_PrevEmp add updated date ; 
alter table SP16_PrevEmp add updated_by VARCHAR2 (255) ; 
/
create or replace trigger SP16_PrevEmp_AUD_trig 
before insert or update on SP16_PrevEmp 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE SP16_PrevProj_seq ; 
create sequence SP16_PrevProj_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger SP16_PrevProj_PK_trig 
before insert on SP16_PrevProj
for each row 
begin 
select SP16_PrevProj_seq.nextval into :new.projNo from dual; 
end; 
/
alter table SP16_PrevProj add created date ; 
alter table SP16_PrevProj add created_by VARCHAR2 (255) ; 
alter table SP16_PrevProj add row_version_number integer ; 
alter table SP16_PrevProj add updated date ; 
alter table SP16_PrevProj add updated_by VARCHAR2 (255) ; 
/
create or replace trigger SP16_PrevProj_AUD_trig 
before insert or update on SP16_PrevProj 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE SP16_Proj_seq ; 
create sequence SP16_Proj_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger SP16_Proj_PK_trig 
before insert on SP16_Proj
for each row 
begin 
select SP16_Proj_seq.nextval into :new.projNo from dual; 
end; 
/
alter table SP16_Proj add created date ; 
alter table SP16_Proj add created_by VARCHAR2 (255) ; 
alter table SP16_Proj add row_version_number integer ; 
alter table SP16_Proj add updated date ; 
alter table SP16_Proj add updated_by VARCHAR2 (255) ; 
/
create or replace trigger SP16_Proj_AUD_trig 
before insert or update on SP16_Proj 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

DROP SEQUENCE SP16_ProjEmp_seq ; 
create sequence SP16_ProjEmp_seq 
start with 100 
increment by 1 
nomaxvalue 
;

create or replace trigger SP16_ProjEmp_PK_trig 
before insert on SP16_ProjEmp
for each row 
begin 
select SP16_ProjEmp_seq.nextval into :new.personID from dual; 
end; 
/
alter table SP16_ProjEmp add created date ; 
alter table SP16_ProjEmp add created_by VARCHAR2 (255) ; 
alter table SP16_ProjEmp add row_version_number integer ; 
alter table SP16_ProjEmp add updated date ; 
alter table SP16_ProjEmp add updated_by VARCHAR2 (255) ; 
/
create or replace trigger SP16_ProjEmp_AUD_trig 
before insert or update on SP16_ProjEmp 
for each row 
begin 
  if inserting then 
    :new.created := localtimestamp; 
    :new.created_by := nvl(wwv_flow.g_user,user); 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
    :new.row_version_number := 1; 
  elsif updating then 
    :new.row_version_number := nvl(:old.row_version_number,1) + 1; 
  end if; 
  if inserting or updating then 
    :new.updated := localtimestamp; 
    :new.updated_by := nvl(wwv_flow.g_user,user); 
  end if; 
end; 
/

-- Table SP16_R2 has a compound primary key so no sequence or trigger was created for it.
-- Table SP16_R7 has a compound primary key so no sequence or trigger was created for it.
-- Table SP16_R9 has a compound primary key so no sequence or trigger was created for it.
DROP INDEX SP16_Emp_personID_FK_0 ;
CREATE INDEX SP16_Emp_personID_FK_0 ON SP16_R2(SP16_Emp_personID) ;
DROP INDEX SP16_CurrProj_projNo_FK_1 ;
CREATE INDEX SP16_CurrProj_projNo_FK_1 ON SP16_R2(SP16_CurrProj_projNo) ;
DROP INDEX SP16_ProjEmp_personID_FK_2 ;
CREATE INDEX SP16_ProjEmp_personID_FK_2 ON SP16_R7(SP16_ProjEmp_personID) ;
DROP INDEX SP16_CurrProj_projNo_FK_3 ;
CREATE INDEX SP16_CurrProj_projNo_FK_3 ON SP16_R7(SP16_CurrProj_projNo) ;
DROP INDEX SP16_Person_personID_FK_4 ;
CREATE INDEX SP16_Person_personID_FK_4 ON SP16_R9(SP16_Person_personID) ;
DROP INDEX SP16_Person_personID1_FK_5 ;
CREATE INDEX SP16_Person_personID1_FK_5 ON SP16_R9(SP16_Person_personID1) ;
DROP INDEX projNo_FK_6 ;
CREATE INDEX projNo_FK_6 ON SP16_CurrProj(projNo) ;
DROP INDEX SP16_Mgr_personID_FK_7 ;
CREATE INDEX SP16_Mgr_personID_FK_7 ON SP16_Dept(SP16_Mgr_personID) ;
DROP INDEX SP16_Mgr_personID_FK_8 ;
CREATE INDEX SP16_Mgr_personID_FK_8 ON SP16_Emp(SP16_Mgr_personID) ;
DROP INDEX personID_FK_9 ;
CREATE INDEX personID_FK_9 ON SP16_Emp(personID) ;
DROP INDEX personID_FK_10 ;
CREATE INDEX personID_FK_10 ON SP16_InterimMgr(personID) ;
DROP INDEX personID_FK_11 ;
CREATE INDEX personID_FK_11 ON SP16_Mgr(personID) ;
DROP INDEX SP16_Person_personID_FK_12 ;
CREATE INDEX SP16_Person_personID_FK_12 ON SP16_Person(SP16_Person_personID) ;
DROP INDEX personID_FK_13 ;
CREATE INDEX personID_FK_13 ON SP16_Pres(personID) ;
DROP INDEX personID_FK_14 ;
CREATE INDEX personID_FK_14 ON SP16_PrevEmp(personID) ;
DROP INDEX projNo_FK_15 ;
CREATE INDEX projNo_FK_15 ON SP16_PrevProj(projNo) ;
DROP INDEX personID_FK_16 ;
CREATE INDEX personID_FK_16 ON SP16_ProjEmp(personID) ;
DROP INDEX SP16_Dept_deptNo_FK_17 ;
CREATE INDEX SP16_Dept_deptNo_FK_17 ON SP16_Proj(SP16_Dept_deptNo) ;
DROP INDEX SP16_Mgr_personID_FK_18 ;
CREATE INDEX SP16_Mgr_personID_FK_18 ON SP16_Proj(SP16_Mgr_personID) ;
DROP INDEX SP16_Proj_projNo_FK_19 ;
CREATE INDEX SP16_Proj_projNo_FK_19 ON SP16_Proj(SP16_Proj_projNo) ;
